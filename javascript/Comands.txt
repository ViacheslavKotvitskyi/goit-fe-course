'use strict'
            
             Типы примитивов

Number - Целые числа и числа с плавающей запятой (разделитель - точка ).
String - Строки это просто текст, последовательность из нуля или более символов.
Boolean - Логический тип данных, флаги состояния. Имеет только два значения: true и false, в нижнем регистре.
null - Особое значение, которое по сути значит ничто. Используется в тех ситуациях, когда необходимо явно указать отсутсвие значения.

typeof - возвращает тип переменной на место вызова 

             Вывод данных

console.log()  - выводит данные в консоль
alert()  - является частью интерфейса window. Выводит модальное окно с задаваемым сообщением. Только OK.

            Получение данных

confirm() - выводит модальное окно с сообщением, и 2 кнопки, Ok и Cancel. При нажатии на Ok, на место вызова функции возвращается true,            при нажатии на Cancel возвращается false.
prompt()  - выводит модальное окно с полем ввода и кнопками Ok и Cancel. При Ok возвращает то, что было введено в поле ввода, при                  Cancel возвращает null.

            Операторы

+-*/ - как в математике
%  - остаток от деления (10/5 остаток 0; 10/3 остаток 1)
переменная += 10 - сложение с заменой. Аналогично записи переменная

a > b и a < b - больше/меньше
a >= b и a <= b - больше/меньше или равно
a == b - равенство
a != b - неравенство
a === b - строгое равенство (без преобрахования типов)
a !== b - строгое неравенство (без преобрахования типов)

Number(val) -            приведение к числу. Если значние не возможно привести к числу, результатом будет NaN (Not a Number).
Number.parseInt(val) -   преобразуют строку символ за символом, до первого не числа, потом возвращается число, которое получилось.
Number.parseFloat(val) - тоже самое, но для числа с плавающей точкой.
Number.isNaN(val) -      проверяет, является ли указанное значение NaN или нет. Этот метод отвечает на вопрос "Это Not A Number?", и                            возвращает: true — если значение val это NaN , false — если значение val это не NaN
Number.isInteger(value) - проверяет целое-ли число. Возвращает true или false.

            Объект Math

Math.floor(num) - возвращает наибольшее целое число, меньшее, либо равное указанному  console.log(Math.floor(1.7)); // 1
Math.ceil(num) - возвращает наименьшее целое число, большее, либо равное указанному числу. console.log(Math.ceil(1.2)); // 2
Math.round(num) - возвращает значение числа, округлённое до ближайшего целого
Math.max(num1, num2, ...) - возвращает наибольшее число из набора
Math.min(num1, num2, ...) - возвращает наименьшее число из набора
Math.pow(base, exponent) - возведение в степень console.log(Math.pow(2, 4)); // 16
Math.random() - возвращает псевдослучайное число в диапазоне [0, 1)
                console.log(Math.random()); // случайное число между 0 и 1
                console.log(Math.random() * (10 - 1) + 1); // случайное число от 1 до 10

            Строки

 console.log(string[n]); - выведет n-й симаол строки
length - свойство строки, вернет длину строки
toLowerCase() и toUpperCase() - вернут новую строку в соответствующем регистре, не изменяют оригинальную строку
indexOf() - вернет позицию (индекс) на которой находится первое совпадение подстроки или -1, если ничего не найдено
includes() - один из наиболее часто используемых методов, в большинстве случаев заменяет indexOf, проверяет входит ли подстрока в строку, возвращает true или false

переменная <имя> = `текст ${переменная} текст и т.д.`  - шаблонная строка и интераоляция

            ЛОГИЧЕСКИЕ Операторы

Truthy и Falsy — термины, которые используются для тех значений, которые, в логической операции, приводятся к true или false, хотя изначально не были булями.

&& - логический "И". Приводит все операнды к булю и возвращает одно из значений (операндов). Левый операнд если его можно привести к        false, и правый в остальных случаях.
|| - логический "ИЛИ". Возвращает одно из значений (операндов). Левый операнд если его можно привести к true, и правый в остальных с        случаях.
! -  возвращает false если операнд приводится к true, и true, если операнд приводится к false. То есть приводит операнд к булю, если        необходимо, а затем заменяет его на противоположный.

            Операторы ветвеления

Входные данные, которые приводятся к булевому типу называются условием. Условие помещают за оператором if в круглых скобках. Если условие приводится к true, то выполняется код в фигурных скобках (ветка), а если условие приводится к false, код в фигурных скобках будет пропущен.

if(условие) {что необходимо выполнить};

if... else  - Расширяет синтаксис оператора if тем, что в случае если условие приводится к false, выполнится код в фигурных скобках                  после оператора else. При true, оператор else и связанный с ним программный блок, игнорируются.
             if(условие) {что необходимо выполнить} else {что необходимо выполнить};

else...if -  работает до первого true, поочередно проверяя условия
             if(условие) {что необходимо выполнить} else if {что необходимо выполнить} и т.д.;
            
            Тернарный оператор

 Работает следующим образом:
                            Вычисляется логическое выражение
                            Если выражение истинно (true), вычисляется выражение после ?, в противном случае значение после :
                            Результат вычисленного выражения возвращается
переменная = проверка условия ? 'Если true' : 'Если false';  

            Инструкция switch
            
Значение выражения - строка или число, которое сравнивается со всеми значениями case. Если совпадения не произошло, управление передается default. Оператор break в завершении каждого блока case ставят чтобы прервать дальнейшие проверки и сразу перейти к коду за инструкцией switch.

let startOfSeason;
const season = 'summer';

switch (season) {
  case 'winter':
    startOfSeason = 'January';
    break;

  case 'spring':
    startOfSeason = 'May';
    break;

  default:
    console.log('Invalid season name');
}

            Область видимости

Любая конструкция использующая фигурные скобки {} (условия, циклы, функции и т. п.) создает новую локальную область видимости, и переменные, объявленные в этой области видимости, используя let или const, не доступны вне этого блока.        